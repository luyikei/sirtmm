// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mam_single
double mam_single(unsigned int y, double theta, double b, double a, double c, const arma::rowvec& g, int K);
RcppExport SEXP _sirtmm_mam_single(SEXP ySEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP cSEXP, SEXP gSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(mam_single(y, theta, b, a, c, g, K));
    return rcpp_result_gen;
END_RCPP
}
// mam_d
arma::vec mam_d(int y, double theta, double b, double a, double c, const arma::rowvec& g, int K);
RcppExport SEXP _sirtmm_mam_d(SEXP ySEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP cSEXP, SEXP gSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(mam_d(y, theta, b, a, c, g, K));
    return rcpp_result_gen;
END_RCPP
}
// mam_Hess
arma::mat mam_Hess(int y, double theta, double b, double a, double c, const arma::rowvec& g, int K);
RcppExport SEXP _sirtmm_mam_Hess(SEXP ySEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP cSEXP, SEXP gSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(mam_Hess(y, theta, b, a, c, g, K));
    return rcpp_result_gen;
END_RCPP
}
// mam_vec
double mam_vec(const arma::rowvec& ys, double theta, const arma::vec& bs, const arma::vec& as, const arma::vec& cs, const arma::mat& gs, int K);
RcppExport SEXP _sirtmm_mam_vec(SEXP ysSEXP, SEXP thetaSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP gsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type as(asSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type cs(csSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(mam_vec(ys, theta, bs, as, cs, gs, K));
    return rcpp_result_gen;
END_RCPP
}
// EStep
List EStep(const NumericMatrix& X, const NumericVector& bs, const NumericVector& as, const NumericVector& cs, const NumericMatrix& gs, int K, const NumericVector& points, const NumericVector& weights);
RcppExport SEXP _sirtmm_EStep(SEXP XSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP gsSEXP, SEXP KSEXP, SEXP pointsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type as(asSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type cs(csSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(EStep(X, bs, as, cs, gs, K, points, weights));
    return rcpp_result_gen;
END_RCPP
}
// fisherScoring
List fisherScoring(const NumericVector& bs, const NumericVector& as, const NumericVector& cs, const NumericMatrix& gs, int K, const NumericVector& rhat, const NumericVector& nhat, const NumericVector& points, double lambda, double lambda2, int maxIter);
RcppExport SEXP _sirtmm_fisherScoring(SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP gsSEXP, SEXP KSEXP, SEXP rhatSEXP, SEXP nhatSEXP, SEXP pointsSEXP, SEXP lambdaSEXP, SEXP lambda2SEXP, SEXP maxIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type as(asSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type cs(csSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rhat(rhatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nhat(nhatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    rcpp_result_gen = Rcpp::wrap(fisherScoring(bs, as, cs, gs, K, rhat, nhat, points, lambda, lambda2, maxIter));
    return rcpp_result_gen;
END_RCPP
}
// EMSteps
List EMSteps(const NumericMatrix& X, int K, const NumericVector& points, const NumericVector& weights, double lambda, double lambda2, double ngs, int maxEMIter, int maxNRIter, bool verbose);
RcppExport SEXP _sirtmm_EMSteps(SEXP XSEXP, SEXP KSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP lambdaSEXP, SEXP lambda2SEXP, SEXP ngsSEXP, SEXP maxEMIterSEXP, SEXP maxNRIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type ngs(ngsSEXP);
    Rcpp::traits::input_parameter< int >::type maxEMIter(maxEMIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxNRIter(maxNRIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(EMSteps(X, K, points, weights, lambda, lambda2, ngs, maxEMIter, maxNRIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// LogLikliTotal
double LogLikliTotal(const NumericMatrix& X, const NumericVector& bs, const NumericVector& as, const NumericVector& cs, const NumericMatrix& gs, int K, const NumericVector& rhat, const NumericVector& points);
RcppExport SEXP _sirtmm_LogLikliTotal(SEXP XSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP gsSEXP, SEXP KSEXP, SEXP rhatSEXP, SEXP pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type as(asSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type cs(csSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rhat(rhatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type points(pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLikliTotal(X, bs, as, cs, gs, K, rhat, points));
    return rcpp_result_gen;
END_RCPP
}
// SE
List SE(const NumericMatrix& X, NumericVector bs, NumericVector as, NumericVector cs, const NumericMatrix& gs, int K, NumericVector points, const NumericVector& weights);
RcppExport SEXP _sirtmm_SE(SEXP XSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP gsSEXP, SEXP KSEXP, SEXP pointsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type as(asSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cs(csSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(SE(X, bs, as, cs, gs, K, points, weights));
    return rcpp_result_gen;
END_RCPP
}
// eap_theta
NumericVector eap_theta(NumericMatrix X, NumericVector bs, NumericVector as, NumericVector cs, const NumericMatrix& gs, int K, NumericVector points, NumericVector weights);
RcppExport SEXP _sirtmm_eap_theta(SEXP XSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP gsSEXP, SEXP KSEXP, SEXP pointsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type as(asSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cs(csSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eap_theta(X, bs, as, cs, gs, K, points, weights));
    return rcpp_result_gen;
END_RCPP
}
// PSD
NumericVector PSD(NumericMatrix X, NumericVector thetas, NumericVector bs, NumericVector as, NumericVector cs, const NumericMatrix& gs, int K, NumericVector points, NumericVector weights);
RcppExport SEXP _sirtmm_PSD(SEXP XSEXP, SEXP thetasSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP gsSEXP, SEXP KSEXP, SEXP pointsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type as(asSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cs(csSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(PSD(X, thetas, bs, as, cs, gs, K, points, weights));
    return rcpp_result_gen;
END_RCPP
}
// eap_theta_irt
NumericVector eap_theta_irt(NumericMatrix X, NumericVector bs, NumericVector as, NumericVector cs, int K, NumericVector points, NumericVector weights);
RcppExport SEXP _sirtmm_eap_theta_irt(SEXP XSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP KSEXP, SEXP pointsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type as(asSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cs(csSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eap_theta_irt(X, bs, as, cs, K, points, weights));
    return rcpp_result_gen;
END_RCPP
}
// PSD3PL
NumericVector PSD3PL(NumericMatrix X, NumericVector thetas, NumericVector bs, NumericVector as, NumericVector cs, NumericVector points, NumericVector weights);
RcppExport SEXP _sirtmm_PSD3PL(SEXP XSEXP, SEXP thetasSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP pointsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type as(asSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cs(csSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(PSD3PL(X, thetas, bs, as, cs, points, weights));
    return rcpp_result_gen;
END_RCPP
}
// Score
NumericVector Score(NumericMatrix X, NumericVector scheme);
RcppExport SEXP _sirtmm_Score(SEXP XSEXP, SEXP schemeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scheme(schemeSEXP);
    rcpp_result_gen = Rcpp::wrap(Score(X, scheme));
    return rcpp_result_gen;
END_RCPP
}
// FI
NumericVector FI(NumericVector thetas, NumericVector bs, NumericVector as, NumericVector cs, const NumericMatrix& gs, int K);
RcppExport SEXP _sirtmm_FI(SEXP thetasSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP, SEXP gsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type as(asSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cs(csSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(FI(thetas, bs, as, cs, gs, K));
    return rcpp_result_gen;
END_RCPP
}
// FI3PL
NumericVector FI3PL(NumericVector thetas, NumericVector bs, NumericVector as, NumericVector cs);
RcppExport SEXP _sirtmm_FI3PL(SEXP thetasSEXP, SEXP bsSEXP, SEXP asSEXP, SEXP csSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type as(asSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cs(csSEXP);
    rcpp_result_gen = Rcpp::wrap(FI3PL(thetas, bs, as, cs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sirtmm_mam_single", (DL_FUNC) &_sirtmm_mam_single, 7},
    {"_sirtmm_mam_d", (DL_FUNC) &_sirtmm_mam_d, 7},
    {"_sirtmm_mam_Hess", (DL_FUNC) &_sirtmm_mam_Hess, 7},
    {"_sirtmm_mam_vec", (DL_FUNC) &_sirtmm_mam_vec, 7},
    {"_sirtmm_EStep", (DL_FUNC) &_sirtmm_EStep, 8},
    {"_sirtmm_fisherScoring", (DL_FUNC) &_sirtmm_fisherScoring, 11},
    {"_sirtmm_EMSteps", (DL_FUNC) &_sirtmm_EMSteps, 10},
    {"_sirtmm_LogLikliTotal", (DL_FUNC) &_sirtmm_LogLikliTotal, 8},
    {"_sirtmm_SE", (DL_FUNC) &_sirtmm_SE, 8},
    {"_sirtmm_eap_theta", (DL_FUNC) &_sirtmm_eap_theta, 8},
    {"_sirtmm_PSD", (DL_FUNC) &_sirtmm_PSD, 9},
    {"_sirtmm_eap_theta_irt", (DL_FUNC) &_sirtmm_eap_theta_irt, 7},
    {"_sirtmm_PSD3PL", (DL_FUNC) &_sirtmm_PSD3PL, 7},
    {"_sirtmm_Score", (DL_FUNC) &_sirtmm_Score, 2},
    {"_sirtmm_FI", (DL_FUNC) &_sirtmm_FI, 6},
    {"_sirtmm_FI3PL", (DL_FUNC) &_sirtmm_FI3PL, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_sirtmm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
